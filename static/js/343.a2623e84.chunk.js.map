{"version":3,"file":"static/js/343.a2623e84.chunk.js","mappings":"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","sources":["components/Contact/Contact.jsx","redux/contacts/contacts-selector.js","redux/filter/filter-selector.js","components/ContactList/ContactList.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","pages/Contacts.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/contacts-operation';\nimport { Flex, Box, Text, Avatar, IconButton } from '@chakra-ui/react';\nimport { DeleteIcon } from '@chakra-ui/icons'\n\n\nexport const Contact = ({ id, name, number}) => {\n  const dispatch = useDispatch();\n  const handleDelete = () => dispatch(deleteContact(id));\n\n  let slicedName = name.slice(0,15);\n  if (slicedName.length < name.length) {\n   slicedName += '...';\n   }\n\n  return (\n    <Flex p='1' justify='flex-start' w='300px'>\n      <Avatar name={name} src='https://bit.ly/broken-link'/>\n      <Box pl='3' pr='3'>\n        <Text >{slicedName}</Text>\n        <Text variant = 'sm' >{number}</Text>\n        </Box>\n      <IconButton ml='auto' onClick={handleDelete} aria-label='Search database' icon={<DeleteIcon />} />\n    </Flex>\n  );\n};","export const getContacts = state => state.contacts.items;\nexport const getLoading = state => state.contacts.isLoading;\nexport const getError = state => state.contacts.error;\n","export const getFilter = state => state.filter;\n","import { useSelector } from 'react-redux';\nimport { Contact } from '../Contact/Contact';\nimport { getContacts } from 'redux/contacts/contacts-selector';\nimport { getFilter } from 'redux/filter/filter-selector';\nimport { Flex } from '@chakra-ui/react';\n\nexport const ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const getFiltereContacts = () => {\n    if (!filter) {\n        return contacts;\n    }\n    const normalizedFilter = filter.toLocaleLowerCase();       \n    const filteredContacts = contacts.filter(({ name, number }) => {\n        const normalizedName = name.toLocaleLowerCase();\n        const normalizedNumber = number.toLocaleLowerCase();\n        const result = normalizedName.includes(normalizedFilter) || normalizedNumber.includes(normalizedFilter);\n        return result;\n    })   \n    return filteredContacts;\n    }\n\n    const filterContacts = getFiltereContacts();\n\n\n  return (\n    <Flex p='8' align=\"center\" justify=\"center\">\n      <ul >\n        {filterContacts.map(({ id, name, number }) => (\n          <li key={id}>\n            <Contact id={id} name={name} number={number} />\n          </li>\n        ))}\n      </ul>\n    </Flex>\n  );\n};\n","import React from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/contacts-operation';\nimport { Modal, ModalOverlay, ModalContent, Button, useDisclosure, Input, Flex,FormLabel, FormControl, useToast } from '@chakra-ui/react'\nimport { AddIcon } from '@chakra-ui/icons';\nimport { getContacts } from 'redux/contacts/contacts-selector';\n\n\nexport const ContactForm = () => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const initialRef = React.useRef(null);\n  const finalRef = React.useRef(null);\n  const dispatch = useDispatch();\n  const items = useSelector(getContacts);;\n  const toast = useToast()\n\n  const isDuplicate = (element) => {\n    const result = items.find((item) => item.name.toLocaleLowerCase() === element.toLocaleLowerCase())\n    return result\n  }\n  const handleSubmit = e => {\n    e.preventDefault();\n    console.log();\n    if (!isDuplicate(e.target.elements.name.value)) {\n      const form = e.target;\n      dispatch(addContact({ \"name\": e.target.elements.name.value, \"number\": e.target.elements.number.value }));\n      form.reset();\n      return\n    }\n      toast({\n        title: 'Error',\n        description: `${e.target.elements.name.value} is already in the contact list`,\n        status: 'error',\n        duration: 3000,\n        isClosable: true,\n      })\n  };\n\n    return (\n      <Flex p='6' justify='flex-end'>\n        <Button leftIcon={<AddIcon />} onClick={onOpen}>Add</Button>\n\n        <Modal\n          initialFocusRef={initialRef}\n          finalFocusRef={finalRef}\n          isOpen={isOpen}\n          onClose={onClose}\n          onSubmit={handleSubmit}\n        >\n          <ModalOverlay />\n          <ModalContent p='3'>\n            <form onSubmit={handleSubmit}>\n              <FormControl pb='3'>\n                <FormLabel>Name</FormLabel>\n                <Input placeholder='Name' type=\"text\" name=\"name\" pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\" title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\" />\n              </FormControl>\n              <FormControl pb='3'>\n                <FormLabel>Phone</FormLabel>\n                <Input placeholder='Phone number' type=\"tel\" name=\"number\" pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\" title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\" />\n              </FormControl>\n              <Flex justify='space-evenly'>\n                <Button type=\"submit\">Save</Button>\n                <Button onClick={onClose}>Cancel</Button>\n              </Flex>\n            </form>\n          </ModalContent>\n        </Modal>\n      </Flex>\n    );\n}\n","import { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/filter/filter-selector';\nimport { setFilter } from 'redux/filter/filter-slice';\nimport { InputGroup, InputLeftElement, Input, Flex } from '@chakra-ui/react';\nimport { Search2Icon } from '@chakra-ui/icons';\n\nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const filter = useSelector(getFilter);\n\n    const handleChange = (e) => {\n    const { value } = e.target;\n    dispatch(setFilter(value))\n    };\n\n    return (\n        <Flex align=\"center\" justify=\"center\">\n            <InputGroup w='300px' display=\"flex\" justify=\"center\">\n                <InputLeftElement\n                pointerEvents='none'\n                children={<Search2Icon color='gray.300' />}\n                />\n                <Input type='text' placeholder='filter' value={filter} onChange={handleChange} />\n            </InputGroup>\n        </Flex>\n    )\n\n}","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { fetchContacts } from 'redux/contacts/contacts-operation';\nimport { Filter } from 'components/Filter/Filter';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Your ContactList</title>\n      </Helmet>\n      <ContactForm />\n      <Filter/>\n      <ContactList />\n    </>\n  );\n}\n"],"names":["Contact","_ref","id","name","number","dispatch","useDispatch","slicedName","slice","length","_jsxs","Flex","p","justify","w","children","_jsx","Avatar","src","Box","pl","pr","Text","variant","IconButton","ml","onClick","deleteContact","icon","DeleteIcon","getContacts","state","contacts","items","getFilter","filter","ContactList","useSelector","filterContacts","normalizedFilter","toLocaleLowerCase","normalizedName","normalizedNumber","includes","getFiltereContacts","align","map","_ref2","ContactForm","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","initialRef","React","finalRef","toast","useToast","handleSubmit","e","preventDefault","console","log","element","target","elements","value","find","item","form","addContact","reset","title","description","concat","status","duration","isClosable","Button","leftIcon","AddIcon","Modal","initialFocusRef","finalFocusRef","onSubmit","ModalOverlay","ModalContent","FormControl","pb","FormLabel","Input","placeholder","type","pattern","Filter","InputGroup","display","InputLeftElement","pointerEvents","Search2Icon","color","onChange","setFilter","Contacts","useEffect","fetchContacts","_Fragment","Helmet"],"sourceRoot":""}